a <- available.packages()
View(a)
install.packages("KernSmooth")
library(KernSmooth)
q
q()
getwd
getwd()
dir()
setwd("~/R/Coursera")
getwd()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, count > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
q()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
package('dplyr')
packageVersion('dplyr')
bind_rows(passed, failed)
sat
?bind_rows
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34)
this_moment
?now
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
q()
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y ~ x)
summary(lm(y ~ x))
mtcars
x <- mtcars$wt
y <- mtcars$mpg
summary(lm(y ~ x))
str(lm(y ~ x))
sumCoef <- summary(lm(y ~ x))$coefficients
sumCoef
x
y
?predict
predict(lm(y ~ x))
predict(lm(y ~ x), interval = "confidence")
predict(lm(y ~ x), newdata = mean(x) interval = "confidence")
predict(lm(y ~ x), newdata = mean(x), interval = "confidence")
mean(x)
predict(lm(y ~ x), newdata = 3.21725, interval = "confidence")
lm(y ~ x)
37.285 - 5.344*mean(x)
?mtcars
mean(x)
37.285 - 5.344*3
summary(lm(y ~ I(x - mean(x))))
predict(lm(y ~ I(x - mean(x))), interval = "confidence")
predict(lm(y ~ x), newdata = data.frame(x = seq(mean(x))), interval = "confidence")
predict(lm(y ~ x), newdata = data.frame(mean(x)), interval = "confidence")
predict(lm(y ~ x), newdata = data.frame(x = seq(mean(x))), interval = "confidence")
diamond
library("diamond")
c(sum(resid(lm(y ~ 1))^2), sum(resid(lm(y ~ x))^2))
1126/278
mean(x)
predict(lm(y ~ x), mean(x), interval = "confidence")
mpg
mtcars$mpg
predict(lm(mpg ~ wt, mtcars), mean(x), interval = "confidence")
lm(mpg ~ wt, mtcars)
predict(lm(mpg ~ wt, data=mtcars), mean(x), interval = "confidence")
predict(lm(y ~ x), data.frame(train_x=c(mean(x))), interval = "confidence")
predict(lm(y ~ x), data.frame(x=c(mean(x))), interval = "confidence")
predict(lm(y ~ x), data.frame(x=c(3)), interval = "confidence")
predict(lm(y ~ x), data.frame(x=c(3)), interval = "prediction")
predict(lm(y ~ x), data.frame(x=c(2)), interval = "confidence")
summary(lm(y ~ x))
summary(lm(y ~ I(x*2)))
summary(lm(y ~ I(x/2)))
sumCoef <- summary(lm(y ~ I(x/2)))$coefficients
sumCoef[2,1] + c(-1,1) * qt(0.975, df = 30)*sumCoef[2,2]
setwd("~/R/Coursera/Reproducible Research/RepData_PeerAssessment1")
activity <- tbl_df(read.csv("./activity.csv"))
library(dplyr)
activity <- tbl_df(read.csv("./activity.csv"))
activity
group_by(activity, date, interval)
activity <- group_by(activity, date, interval)
summarise(activity, mean_steps = mean(steps, na.rm = TRUE))
?summarise
summarise(activity, mean(steps, na.rm = TRUE))
summarise(activity, steps)
activity <- tbl_df(read.csv("./activity.csv"))
activity
summarise(activity)
summarise(activity, mean_steps = mean(steps, na.rm = TRUE))
activity_per_day <- group_by(activity, date)
summarise(activity_per_day, mean_steps = mean(steps, na.rm = TRUE))
per_day <- group_by(activity, date)
remove(activity_per_day)
mean_per_day <- summarise(per_day, mean_steps = mean(steps, na.rm = TRUE))
library(ggplot2)
qplot(date, mean_steps, data = mean_per_day)
hist(mean_per_day)
hist(mean_per_day$mean_steps)
total_per_day <- summarise(per_day, total_steps = sum(steps, na.rm = TRUE))
total_per_day
remove(mean_per_day)
hist(total_per_day$total_steps)
by_interval <- group_by(activity, interval)
by_interval
summarise(by_interval, mean_steps = mean(steps, na.rm = TRUE))
mean_per_interval <- summarise(by_interval, mean_steps = mean(steps, na.rm = TRUE))
plot(mean_per_interval$interval, mean_per_interval$mean_steps, type = "l")
View(mean_per_interval)
?hist
hist(total_per_day$total_steps)
hist(total_per_day$total_steps, breaks = 30)
hist(total_per_day$total_steps, breaks = 25)
hist(total_per_day$total_steps, breaks = 25)
hist(total_per_day$total_steps, breaks = 20)
hist(total_per_day$total_steps, breaks = 25)
hist(total_per_day$total_steps, breaks = 20)
hist(total_per_day$total_steps, breaks = 10)
hist(total_per_day$total_steps, breaks = 8)
hist(total_per_day$total_steps, breaks = 6)
hist(total_per_day$total_steps, breaks = 10)
hist(total_per_day$total_steps, col = "red", breaks = 10)
View(mean_per_interval)
plot(mean_per_interval$interval[8:15], mean_per_interval$mean_steps[8:15], type = "l" )
max(mean_per_interval$mean_steps)
plot(mean_per_interval, type = "l")
plot(mean_per_interval$interval, mean_per_interval$mean_steps, type = "l" )
?ts
as.ts(mean_per_interval)
plot(as.ts(mean_per_interval), type = "l")
as.ts(mean_per_interval)
plot(mean_per_interval, type = "l")
plot(mean_per_interval, type = "l")
mean_per_interval
?strptime
strptime(2300, %H%M)
strptime("2300", %H%M)
strptime("23:00", %H:%M)
strptime(2300, "%H%M")
strptime(mean_per_interval%interval, "%H%M")
strptime(paste(mean_per_interval%interval), "%H%M")
strptime(mean_per_interval$interval, "%H%M")
strptime(paste(mean_per_interval$interval), "%H%M")
?paste0
?str_pad
strptime(str_pad(mean_per_interval$interval, 4, pad = "0"), "%H%M")
library(stringr)
strptime(str_pad(mean_per_interval$interval, 4, pad = "0"), "%H%M")
datetime <- strptime(str_pad(mean_per_interval$interval, 4, pad = "0"), "%H%M")
plot(datetime, mean_per_interval$mean_steps, type = "l")
plot(datetime, mean_per_interval$mean_steps)
mean_per_interval$interval[which.max(mean_per_interval$mean_steps)]
mi <- mean_per_interval$interval[which.max(mean_per_interval$mean_steps)]
strptime(str_pad(mi, 4, pad = "0"), "%H%M")
hours(strptime(str_pad(mi, 4, pad = "0"), "%H%M"))
hour(strptime(str_pad(mi, 4, pad = "0"), "%H%M"))
class(strptime(str_pad(mi, 4, pad = "0"), "%H%M"))
?`POSIXlt-class`
strptime(str_pad(mi, 4, pad = "0"), "%H%M")$hour
print(strptime(str_pad(mi, 4, pad = "0"), "%H%M"))
print(strptime(str_pad(mi, 4, pad = "0"), "%H%M"), hour, minute)
print(strptime(str_pad(mi, 4, pad = "0"), "%H%M"))
?print
class(mean_per_interval$interval[which.max(mean_per_interval$mean_steps)])
mi
paste0(mi, 0)
paste0(0, mi)
?sprintf
sprintf(mi)
sprintf("", mi)
sprintf("d", mi)
sprintf("%d", mi)
sprintf(":%d", mi)
sprintf(":%02d", mi)
sprintf(":%04d", mi)
sprintf(":%01d", mi)
?substr
?substring
substr(mi)
substr(mi, 1)
substring(mi, 1)
substring(mi, 2)
substring(mi, 1,1)
paste0(0, substring(mi, 1, 1), :, substring(mi, 2))
paste0(0, substring(mi, 1, 1), ":", substring(mi, 2))
activity
filter(activity, steps != NA)
filter(activity, steps != "NA")
mean_per_interval
mean_per_interval[5]
mean_per_interval$interval == 5
mean_per_interval$mean_steps[mean_per_interval$interval == 5]
activity
mutate(activity, steps = 1)
activity
mutate(activity, steps = ifelse(steps="NA", mean_per_interval$mean_steps[mean_per_interval$interval==steps], steps))
mutate(activity, steps = ifelse(steps=="NA", mean_per_interval$mean_steps[mean_per_interval$interval==steps], steps))
mutate(activity, steps = ifelse(steps=="NA", 1, steps))
mutate(activity, imputed_steps = ifelse(steps=="NA", 1, steps))
mutate(activity, imputed_steps = if(steps=="NA"), 1 else steps))
mutate(activity, imputed_steps = if(steps=="NA") 1 else steps))
?mutate
mutate_each(activity, funs(ifelse(is.na(.), 1, .)))
mutate_each(activity, funs(ifelse(is.na(.), 1, .)), contains("."))
mutate_each(activity, funs(ifelse(steps="NA", 1, .)))
mutate_each(activity, funs(ifelse(steps=="NA", 1, .)))
mutate_each(activity, funs(ifelse(.=="NA", 1, .)))
mutate(activity, funs(ifelse(is.na(.), 1, .)))
mutate_each(activity, funs(ifelse(.=="NA", 1, .)))
mutate_each(activity, funs(ifelse(.=="NA", ., 1)))
mutate(activity, steps = ifelse(is.na(steps), mean(steps, na.rm = TRUE), steps)
)
mutate(activity, steps = ifelse(is.na(steps), 1, steps))
mutate(activity, steps = ifelse(is.na(steps), mean_per_interval$mean_steps[mean_per_interval$interval==steps], steps))
by_interval
mutate(by_interval, steps = ifelse(is.na(steps), mean(steps, na.rm = TRUE), steps))
by_interval
mutate(by_interval, steps = ifelse(is.na(steps), mean(steps, na.rm = TRUE), steps))
mean_per_interval
imputed <- mutate(by_interval, steps = ifelse(is.na(steps), mean(steps, na.rm = TRUE), steps))
)
imputed
ungroup(imputed)
?weekdays
class(imputed)
class(imputed$date)
mutate(imputed, date_class = strptime(date, "%Y-%M-%D"))
strptime(imputed$date, "%Y-%M-%D")
strptime(paste(imputed$date), "%Y-%M-%D")
imputed
as.Date.POSIXct(imputed$date)
imputed
mutate(imputed, date_class = as.Date.POSIXct(date))
class(imputed$date_class)
class(mutate(imputed, date_class = as.Date.POSIXct(date))$date_class)
class(mutate(imputed, date_class = as.Date.POSIXct(date))$date)
?as.Date
mutate(imputed, date_class = as.Date(date))
mutate(imputed, date = as.Date(date))
class(mutate(imputed, date = as.Date(date)))date
class(mutate(imputed, date = as.Date(date))$date)
imputed <- mutate(imputed, date = as.Date(date))
imputed$date
head(imputed$date)
weekdays(head(imputed$date))
imputed <- mutate(imputed, date = as.Date(date), day = weekdays(date()))
imputed <- mutate(imputed, day = weekdays(date()))
imputed <- mutate(imputed, date = as.Date(date), day = weekdays(date))
imputed
imputed <- select(imputed, steps, date, day, interval)
imputed
library(lattice)
class(imputed$day)
mutate(imputed, day = ifelse(day == "Saturday" | "Sunday", "Weekend", "Weekday"))
mutate(imputed, day = ifelse(day == "Saturday", "weekend", "weekday"))
mutate(imputed, day = ifelse(day == "Saturday" || "Sunday", "weekend", "weekday"))
mutate(imputed, day = ifelse(day == ("Saturday" | "Sunday"), "weekend", "weekday"))
?startswith
?startsWith
mutate(imputed, day = ifelse(day$startsWith("S"), "weekend", "weekday"))
mutate(imputed, day = ifelse(.$startsWith("S"), "weekend", "weekday"))
mutate(imputed, day = ifelse(day == "Saturday" | day == "Sunday", "weekend", "weekday"))
imputed
imputed <- ungroup(mutate(imputed, day = ifelse(day == "Saturday" | day == "Sunday", "weekend", "weekday")))
imputed
class(imputed$day)
mutate(imputed, day = as.factor(day))
class(mutate(imputed, day = as.factor(day))$day)
imputed <- mutate(imputed, day = as.factor(day))
imputed
?"lattice"
xyplot(steps ~ interval | day, data = imputed)
densityplot(steps ~ interval | day, data = imputed)
dotplot(steps ~ interval | day, data = imputed)
wireframe(steps ~ interval | day, data = imputed)
xyplot(steps ~ interval | day, data = imputed)
xyplot.ts(steps ~ interval | day, data = imputed)
?xyplot
library(ggplot2)
qplot(steps ~ interval | day, data = imputed)
qplot(steps ~ interval, data = imputed)
qplot(steps, interval, data = imputed)
qplot(interval, steps, data = imputed)
qplot(interval, steps, data = imputed, geom = "line", facets = day ~ .)
xyplot.ts(steps ~ interval | day, data = imputed, type = "l")
xyplot(steps ~ interval | day, data = imputed, type = "l")
xyplot(steps ~ interval | day, data = imputed, type = "l", layout = c(1,2))
group_by(imputed, interval)
summarise(group_by(imputed, interval), mean_steps = mean(steps))
summarise(group_by(imputed, interval, day), mean_steps = mean(steps))
panels <- summarise(group_by(imputed, interval, day), mean_steps = mean(steps))
xyplot(mean_steps ~ interval | day, data = panels, type = "l", layout = c(1,2))
q()
